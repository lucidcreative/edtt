import { z } from 'zod'\n\n// Common validation schemas\nexport const emailSchema = z.string().email('Invalid email address')\n\nexport const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n  .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n  .regex(/[0-9]/, 'Password must contain at least one number')\n\nexport const nameSchema = z\n  .string()\n  .min(1, 'Name is required')\n  .max(50, 'Name cannot exceed 50 characters')\n  .regex(/^[a-zA-Z\\s'-]+$/, 'Name can only contain letters, spaces, apostrophes, and hyphens')\n\nexport const classroomCodeSchema = z\n  .string()\n  .length(6, 'Classroom code must be 6 characters')\n  .regex(/^[A-Z0-9]+$/, 'Classroom code must contain only uppercase letters and numbers')\n\nexport const tokenAmountSchema = z\n  .number()\n  .int('Token amount must be a whole number')\n  .min(0, 'Token amount cannot be negative')\n  .max(10000, 'Token amount cannot exceed 10,000')\n\nexport const paginationSchema = z.object({\n  page: z.coerce.number().int().min(1).default(1),\n  limit: z.coerce.number().int().min(1).max(100).default(10),\n})\n\n// API response schemas\nexport const apiResponseSchema = <T>(dataSchema: z.ZodType<T>) =>\n  z.object({\n    success: z.boolean(),\n    data: dataSchema.optional(),\n    message: z.string().optional(),\n    error: z.string().optional(),\n  })\n\nexport const errorResponseSchema = z.object({\n  success: z.literal(false),\n  error: z.string(),\n  message: z.string(),\n})\n\n// Form validation helpers\nexport function validateRequired(value: string, fieldName: string) {\n  if (!value || value.trim().length === 0) {\n    return `${fieldName} is required`\n  }\n  return null\n}\n\nexport function validateEmail(email: string) {\n  try {\n    emailSchema.parse(email)\n    return null\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors[0].message\n    }\n    return 'Invalid email address'\n  }\n}\n\nexport function validatePassword(password: string) {\n  try {\n    passwordSchema.parse(password)\n    return null\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return error.errors[0].message\n    }\n    return 'Invalid password'\n  }\n}"