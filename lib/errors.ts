// Custom error classes for better error handling\n\nexport class AppError extends Error {\n  public readonly statusCode: number\n  public readonly isOperational: boolean\n\n  constructor(message: string, statusCode: number = 500, isOperational: boolean = true) {\n    super(message)\n    this.statusCode = statusCode\n    this.isOperational = isOperational\n\n    // Maintains proper stack trace for where our error was thrown\n    Error.captureStackTrace(this, this.constructor)\n  }\n}\n\nexport class ValidationError extends AppError {\n  constructor(message: string = 'Validation failed') {\n    super(message, 400)\n  }\n}\n\nexport class AuthenticationError extends AppError {\n  constructor(message: string = 'Authentication failed') {\n    super(message, 401)\n  }\n}\n\nexport class AuthorizationError extends AppError {\n  constructor(message: string = 'Access denied') {\n    super(message, 403)\n  }\n}\n\nexport class NotFoundError extends AppError {\n  constructor(resource: string = 'Resource') {\n    super(`${resource} not found`, 404)\n  }\n}\n\nexport class ConflictError extends AppError {\n  constructor(message: string = 'Resource conflict') {\n    super(message, 409)\n  }\n}\n\nexport class DatabaseError extends AppError {\n  constructor(message: string = 'Database operation failed') {\n    super(message, 500)\n  }\n}\n\n// Error handling utilities\nexport function isAppError(error: any): error is AppError {\n  return error instanceof AppError\n}\n\nexport function getErrorMessage(error: unknown): string {\n  if (error instanceof Error) {\n    return error.message\n  }\n  if (typeof error === 'string') {\n    return error\n  }\n  return 'An unknown error occurred'\n}\n\nexport function getErrorStatusCode(error: unknown): number {\n  if (isAppError(error)) {\n    return error.statusCode\n  }\n  return 500\n}\n\n// API error response helper\nexport function createErrorResponse(error: unknown) {\n  const message = getErrorMessage(error)\n  const statusCode = getErrorStatusCode(error)\n  \n  // Don't expose internal error details in production\n  const isDevelopment = process.env.NODE_ENV === 'development'\n  \n  return {\n    success: false,\n    error: message,\n    message: isDevelopment ? message : 'An error occurred',\n    ...(isDevelopment && error instanceof Error && { stack: error.stack })\n  }\n}\n\n// Async error handler wrapper\nexport function asyncHandler<T extends any[], R>(\n  fn: (...args: T) => Promise<R>\n): (...args: T) => Promise<R> {\n  return async (...args: T): Promise<R> => {\n    try {\n      return await fn(...args)\n    } catch (error) {\n      // Log error for debugging\n      console.error('Async handler error:', error)\n      throw error\n    }\n  }\n}"