import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\nimport { cookies } from 'next/headers'\nimport { db, classrooms, users } from '@/lib/database'\nimport { eq } from 'drizzle-orm'\nimport { z } from 'zod'\n\nconst createClassroomSchema = z.object({\n  name: z.string().min(1, 'Classroom name is required'),\n  description: z.string().optional(),\n})\n\n// Generate classroom code\nfunction generateClassroomCode(): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n  let result = ''\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return result\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const cookieStore = cookies()\n    const supabase = createClient(cookieStore)\n    \n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    \n    if (authError || !user) {\n      return NextResponse.json(\n        { message: \"Unauthorized\" },\n        { status: 401 }\n      )\n    }\n\n    // Get user profile to check role\n    const [userProfile] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, user.id))\n      .limit(1)\n\n    if (!userProfile || userProfile.role !== 'teacher') {\n      return NextResponse.json(\n        { message: \"Only teachers can create classrooms\" },\n        { status: 403 }\n      )\n    }\n\n    const body = await request.json()\n    const validatedData = createClassroomSchema.parse(body)\n\n    // Generate unique classroom code\n    let code\n    let attempts = 0\n    do {\n      code = generateClassroomCode()\n      const [existing] = await db\n        .select()\n        .from(classrooms)\n        .where(eq(classrooms.joinCode, code))\n        .limit(1)\n      if (!existing) break\n      attempts++\n    } while (attempts < 10)\n\n    if (attempts >= 10) {\n      return NextResponse.json(\n        { message: \"Unable to generate unique classroom code\" },\n        { status: 500 }\n      )\n    }\n\n    const [classroom] = await db\n      .insert(classrooms)\n      .values({\n        name: validatedData.name,\n        description: validatedData.description,\n        code,\n        joinCode: code,\n        teacherId: user.id,\n        isActive: true,\n      })\n      .returning()\n\n    return NextResponse.json(classroom, { status: 201 })\n  } catch (error) {\n    console.error(\"Create classroom error:\", error)\n    return NextResponse.json(\n      { message: \"Internal server error\" },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const cookieStore = cookies()\n    const supabase = createClient(cookieStore)\n    \n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    \n    if (authError || !user) {\n      return NextResponse.json(\n        { message: \"Unauthorized\" },\n        { status: 401 }\n      )\n    }\n\n    // Get user profile to check role\n    const [userProfile] = await db\n      .select()\n      .from(users)\n      .where(eq(users.id, user.id))\n      .limit(1)\n\n    if (!userProfile) {\n      return NextResponse.json(\n        { message: \"User profile not found\" },\n        { status: 404 }\n      )\n    }\n\n    let userClassrooms\n    if (userProfile.role === 'teacher') {\n      userClassrooms = await db\n        .select()\n        .from(classrooms)\n        .where(eq(classrooms.teacherId, user.id))\n    } else {\n      // For students, we'll need to join with student_classrooms table\n      // This is a simplified version - you may need to adjust based on your schema\n      userClassrooms = []\n    }\n\n    return NextResponse.json(userClassrooms)\n  } catch (error) {\n    console.error(\"Get classrooms error:\", error)\n    return NextResponse.json(\n      { message: \"Internal server error\" },\n      { status: 500 }\n    )\n  }\n}"