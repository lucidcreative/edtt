import { useState, useEffect } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { motion, AnimatePresence } from "framer-motion";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { 
  Store, 
  ShoppingCart, 
  Heart,
  Search,
  Filter,
  Star,
  Package,
  Clock,
  Zap,
  Gift,
  Trophy,
  Target,
  Plus,
  Minus,
  X,
  CreditCard,
  Coins,
  CheckCircle,
  AlertCircle
} from "lucide-react";

interface StudentShoppingExperienceProps {
  studentId: string;
  classroomId: string;
}

interface StoreItem {
  id: string;
  title: string;
  description: string;
  currentPrice: number;
  itemType: 'physical' | 'digital' | 'privilege' | 'academic_benefit';
  category: string;
  inventoryType: 'unlimited' | 'limited' | 'one_time';
  availableQuantity?: number;
  maxPerStudent: number;
  isRecurring: boolean;
  recurringInterval?: 'weekly' | 'biweekly' | 'monthly';
  recurringAmount?: number;
  imageUrl?: string;
  colorTheme?: string;
  featured: boolean;
  tags: string[];
  canAfford: boolean;
  alreadyPurchased: number;
  inWishlist: boolean;
}\n\ninterface CartItem {\n  item: StoreItem;\n  quantity: number;\n}\n\ninterface WalletData {\n  currentBalance: number;\n  totalEarned: number;\n  totalSpent: number;\n}\n\nexport default function StudentShoppingExperience({ studentId, classroomId }: StudentShoppingExperienceProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [cart, setCart] = useState<CartItem[]>([]);\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<StoreItem | null>(null);\n  const [showItemDetail, setShowItemDetail] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch wallet data\n  const { data: walletData } = useQuery<WalletData>({\n    queryKey: [\"/api/wallets/student\", studentId, \"classroom\", classroomId],\n    enabled: !!studentId && !!classroomId\n  });\n\n  // Fetch available store items\n  const { data: storeItems = [], isLoading: itemsLoading } = useQuery<StoreItem[]>({\n    queryKey: [\"/api/store/student\", studentId, \"classroom\", classroomId],\n    enabled: !!studentId && !!classroomId\n  });\n\n  // Fetch wishlist\n  const { data: wishlistItems = [] } = useQuery({\n    queryKey: [\"/api/wishlist/student\", studentId, \"classroom\", classroomId],\n    enabled: !!studentId && !!classroomId\n  });\n\n  // Purchase mutation\n  const purchaseMutation = useMutation({\n    mutationFn: async (purchaseData: { items: CartItem[] }) => {\n      return apiRequest(\"/api/store/purchase\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          studentId,\n          classroomId,\n          items: purchaseData.items.map(cartItem => ({\n            itemId: cartItem.item.id,\n            quantity: cartItem.quantity\n          }))\n        })\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Purchase Successful! 🎉\",\n        description: `You've successfully purchased ${cart.length} item(s)`,\n        variant: \"default\"\n      });\n      setCart([]);\n      setIsCartOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallets/student\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/store/student\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Unable to complete purchase. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Add to wishlist mutation\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      return apiRequest(\"/api/wishlist/add\", {\n        method: \"POST\",\n        body: JSON.stringify({ studentId, classroomId, itemId })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Added to Wishlist! 💝\",\n        description: \"Item saved to your wishlist\",\n        variant: \"default\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist/student\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/store/student\"] });\n    }\n  });\n\n  // Filter items based on search and category\n  const filteredItems = storeItems.filter(item => {\n    const matchesSearch = item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         item.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         item.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    const matchesCategory = selectedCategory === \"all\" || item.category.toLowerCase() === selectedCategory.toLowerCase();\n    return matchesSearch && matchesCategory;\n  });\n\n  // Get unique categories\n  const categories = [\"all\", ...Array.from(new Set(storeItems.map(item => item.category)))];\n\n  // Cart calculations\n  const cartTotal = cart.reduce((total, cartItem) => total + (cartItem.item.currentPrice * cartItem.quantity), 0);\n  const canAffordCart = (walletData?.currentBalance || 0) >= cartTotal;\n\n  const addToCart = (item: StoreItem) => {\n    setCart(prev => {\n      const existingItem = prev.find(cartItem => cartItem.item.id === item.id);\n      if (existingItem) {\n        if (existingItem.quantity < item.maxPerStudent) {\n          return prev.map(cartItem => \n            cartItem.item.id === item.id \n              ? { ...cartItem, quantity: cartItem.quantity + 1 }\n              : cartItem\n          );\n        } else {\n          toast({\n            title: \"Purchase Limit Reached\",\n            description: `You can only purchase ${item.maxPerStudent} of this item`,\n            variant: \"destructive\"\n          });\n          return prev;\n        }\n      }\n      return [...prev, { item, quantity: 1 }];\n    });\n  };\n\n  const removeFromCart = (itemId: string) => {\n    setCart(prev => prev.filter(cartItem => cartItem.item.id !== itemId));\n  };\n\n  const updateCartQuantity = (itemId: string, change: number) => {\n    setCart(prev => {\n      return prev.map(cartItem => {\n        if (cartItem.item.id === itemId) {\n          const newQuantity = cartItem.quantity + change;\n          if (newQuantity <= 0) {\n            return null;\n          }\n          if (newQuantity > cartItem.item.maxPerStudent) {\n            toast({\n              title: \"Purchase Limit Reached\",\n              description: `Maximum ${cartItem.item.maxPerStudent} per student`,\n              variant: \"destructive\"\n            });\n            return cartItem;\n          }\n          return { ...cartItem, quantity: newQuantity };\n        }\n        return cartItem;\n      }).filter(Boolean) as CartItem[];\n    });\n  };\n\n  const getItemIcon = (itemType: string) => {\n    switch (itemType) {\n      case 'physical': return <Package className=\"w-5 h-5\" />;\n      case 'digital': return <Zap className=\"w-5 h-5\" />;\n      case 'privilege': return <Star className=\"w-5 h-5\" />;\n      case 'academic_benefit': return <Trophy className=\"w-5 h-5\" />;\n      default: return <Gift className=\"w-5 h-5\" />;\n    }\n  };\n\n  const featuredItems = filteredItems.filter(item => item.featured);\n  const regularItems = filteredItems.filter(item => !item.featured);\n\n  return (\n    <div className=\"max-w-md mx-auto bg-gradient-to-br from-purple-50 to-pink-50 min-h-screen\">\n      {/* Header with Balance */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-gradient-to-r from-purple-600 to-pink-600 text-white p-4 rounded-b-3xl shadow-lg sticky top-0 z-40\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-2\">\n            <Store className=\"w-6 h-6\" />\n            <h1 className=\"text-lg font-bold\">Class Store</h1>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex items-center gap-1 bg-white/20 rounded-full px-3 py-1\">\n              <Coins className=\"w-4 h-4\" />\n              <span className=\"font-bold\">{walletData?.currentBalance || 0}</span>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsCartOpen(true)}\n              className=\"text-white hover:bg-white/20 relative\"\n              data-testid=\"button-open-cart\"\n            >\n              <ShoppingCart className=\"w-5 h-5\" />\n              {cart.length > 0 && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center text-xs font-bold\"\n                >\n                  {cart.length}\n                </motion.div>\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filter */}\n        <div className=\"space-y-3\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-white/70\" />\n            <Input\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search items...\"\n              className=\"pl-10 bg-white/20 border-white/30 text-white placeholder-white/70\"\n              data-testid=\"input-search-items\"\n            />\n          </div>\n          \n          <ScrollArea className=\"w-full\">\n            <div className=\"flex gap-2 pb-2\">\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"secondary\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className={`shrink-0 text-xs ${\n                    selectedCategory === category\n                      ? \"bg-white text-purple-600\"\n                      : \"text-white hover:bg-white/20\"\n                  }`}\n                  data-testid={`filter-category-${category}`}\n                >\n                  {category === \"all\" ? \"All\" : category}\n                </Button>\n              ))}\n            </div>\n          </ScrollArea>\n        </div>\n      </motion.div>\n\n      {/* Store Content */}\n      <div className=\"p-4 space-y-6\">\n        {/* Featured Items */}\n        {featuredItems.length > 0 && (\n          <div>\n            <h2 className=\"text-lg font-bold text-gray-900 mb-3 flex items-center gap-2\">\n              <Star className=\"w-5 h-5 text-yellow-500\" />\n              Featured Items\n            </h2>\n            <ScrollArea className=\"w-full\">\n              <div className=\"flex gap-4 pb-4\">\n                {featuredItems.map((item) => (\n                  <motion.div\n                    key={item.id}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"shrink-0 w-48\"\n                  >\n                    <Card className=\"border-2 border-yellow-300 bg-gradient-to-br from-yellow-50 to-orange-50 hover:shadow-lg transition-shadow cursor-pointer\"\n                          onClick={() => { setSelectedItem(item); setShowItemDetail(true); }}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          {getItemIcon(item.itemType)}\n                          <h3 className=\"font-semibold text-sm text-gray-900 line-clamp-2\">\n                            {item.title}\n                          </h3>\n                        </div>\n                        \n                        <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\">\n                          {item.description}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-1\">\n                            <span className={`font-bold text-sm ${\n                              item.canAfford ? 'text-green-600' : 'text-red-500'\n                            }`}>\n                              {item.currentPrice} 🪙\n                            </span>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-1\">\n                            {!item.inWishlist && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  addToWishlistMutation.mutate(item.id);\n                                }}\n                                className=\"p-1 h-7 w-7\"\n                              >\n                                <Heart className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                            \n                            <Button\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                addToCart(item);\n                              }}\n                              disabled={!item.canAfford || (item.inventoryType === 'limited' && item.availableQuantity === 0)}\n                              className=\"bg-purple-600 hover:bg-purple-700 text-white h-7 px-3 text-xs\"\n                              data-testid={`button-add-to-cart-${item.id}`}\n                            >\n                              <Plus className=\"w-3 h-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        )}\n\n        {/* Regular Items Grid */}\n        <div>\n          <h2 className=\"text-lg font-bold text-gray-900 mb-3\">All Items</h2>\n          \n          {itemsLoading ? (\n            <div className=\"grid grid-cols-2 gap-3\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"h-20 bg-gray-200 rounded mb-3\" />\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : regularItems.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Store className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Items Found</h3>\n                <p className=\"text-gray-600\">\n                  {searchQuery || selectedCategory !== \"all\" \n                    ? \"Try adjusting your search or filters\"\n                    : \"Check back later for new items!\"}\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-2 gap-3\">\n              <AnimatePresence>\n                {regularItems.map((item, index) => (\n                  <motion.div\n                    key={item.id}\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.9 }}\n                    transition={{ delay: index * 0.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Card className={`border-2 transition-all duration-200 hover:shadow-md cursor-pointer ${\n                      item.canAfford ? 'border-gray-200' : 'border-red-200 bg-red-50'\n                    }`}\n                          onClick={() => { setSelectedItem(item); setShowItemDetail(true); }}>\n                      <CardContent className=\"p-3\">\n                        <div className=\"flex items-start gap-2 mb-2\">\n                          <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${\n                            item.itemType === 'physical' ? 'bg-blue-100 text-blue-600' :\n                            item.itemType === 'digital' ? 'bg-purple-100 text-purple-600' :\n                            item.itemType === 'privilege' ? 'bg-yellow-100 text-yellow-600' :\n                            'bg-green-100 text-green-600'\n                          }`}>\n                            {getItemIcon(item.itemType)}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <h3 className=\"font-semibold text-sm text-gray-900 line-clamp-2 mb-1\">\n                              {item.title}\n                            </h3>\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              {item.category}\n                            </Badge>\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\">\n                          {item.description}\n                        </p>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className={`font-bold text-sm ${\n                              item.canAfford ? 'text-green-600' : 'text-red-500'\n                            }`}>\n                              {item.currentPrice} 🪙\n                            </span>\n                            \n                            {item.isRecurring && (\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3 text-blue-500\" />\n                                <span className=\"text-xs text-blue-600\">\n                                  {item.recurringInterval}\n                                </span>\n                              </div>\n                            )}\n                          </div>\n                          \n                          {item.inventoryType === 'limited' && (\n                            <div className=\"flex items-center justify-between text-xs\">\n                              <span className=\"text-gray-500\">Stock:</span>\n                              <span className={item.availableQuantity === 0 ? 'text-red-500 font-medium' : 'text-gray-700'}>\n                                {item.availableQuantity} left\n                              </span>\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center gap-2\">\n                            {!item.inWishlist && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  addToWishlistMutation.mutate(item.id);\n                                }}\n                                className=\"flex-1 h-8 text-xs\"\n                                data-testid={`button-wishlist-${item.id}`}\n                              >\n                                <Heart className=\"w-3 h-3 mr-1\" />\n                                Wishlist\n                              </Button>\n                            )}\n                            \n                            <Button\n                              size=\"sm\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                addToCart(item);\n                              }}\n                              disabled={!item.canAfford || (item.inventoryType === 'limited' && item.availableQuantity === 0)}\n                              className=\"flex-1 bg-purple-600 hover:bg-purple-700 text-white h-8 text-xs\"\n                              data-testid={`button-add-to-cart-${item.id}`}\n                            >\n                              {!item.canAfford ? (\n                                <AlertCircle className=\"w-3 h-3 mr-1\" />\n                              ) : (\n                                <Plus className=\"w-3 h-3 mr-1\" />\n                              )}\n                              {!item.canAfford ? 'Need More' : 'Add'}\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                ))}\n              </AnimatePresence>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Shopping Cart Dialog */}\n      <Dialog open={isCartOpen} onOpenChange={setIsCartOpen}>\n        <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <ShoppingCart className=\"w-5 h-5\" />\n              Shopping Cart ({cart.length})\n            </DialogTitle>\n            <DialogDescription>\n              Review your items before purchasing\n            </DialogDescription>\n          </DialogHeader>\n          \n          {cart.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <ShoppingCart className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n              <p className=\"text-gray-600\">Your cart is empty</p>\n              <p className=\"text-sm text-gray-500\">Add some items to get started!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Cart Items */}\n              <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                {cart.map((cartItem) => (\n                  <motion.div\n                    key={cartItem.item.id}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm text-gray-900\">\n                        {cartItem.item.title}\n                      </h4>\n                      <p className=\"text-xs text-gray-600\">\n                        {cartItem.item.currentPrice} 🪙 each\n                      </p>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateCartQuantity(cartItem.item.id, -1)}\n                        className=\"h-7 w-7 p-0\"\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      \n                      <span className=\"font-medium text-sm w-8 text-center\">\n                        {cartItem.quantity}\n                      </span>\n                      \n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => updateCartQuantity(cartItem.item.id, 1)}\n                        className=\"h-7 w-7 p-0\"\n                        disabled={cartItem.quantity >= cartItem.item.maxPerStudent}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFromCart(cartItem.item.id)}\n                        className=\"h-7 w-7 p-0 text-red-600 hover:text-red-700\"\n                      >\n                        <X className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n              \n              {/* Cart Summary */}\n              <div className=\"border-t pt-4 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-medium text-gray-900\">Total:</span>\n                  <span className={`font-bold text-lg ${\n                    canAffordCart ? 'text-green-600' : 'text-red-500'\n                  }`}>\n                    {cartTotal} 🪙\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-gray-600\">Current Balance:</span>\n                  <span className=\"font-medium\">{walletData?.currentBalance || 0} 🪙</span>\n                </div>\n                \n                {!canAffordCart && (\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 text-red-700\">\n                      <AlertCircle className=\"w-4 h-4\" />\n                      <span className=\"text-sm font-medium\">Insufficient Balance</span>\n                    </div>\n                    <p className=\"text-xs text-red-600 mt-1\">\n                      You need {cartTotal - (walletData?.currentBalance || 0)} more tokens\n                    </p>\n                  </div>\n                )}\n                \n                <Button\n                  onClick={() => purchaseMutation.mutate({ items: cart })}\n                  disabled={!canAffordCart || purchaseMutation.isPending}\n                  className=\"w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600\"\n                  data-testid=\"button-complete-purchase\"\n                >\n                  {purchaseMutation.isPending ? (\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      className=\"w-4 h-4 mr-2\"\n                    >\n                      <CreditCard className=\"w-4 h-4\" />\n                    </motion.div>\n                  ) : (\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  )}\n                  Complete Purchase\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Item Detail Dialog */}\n      <Dialog open={showItemDetail} onOpenChange={setShowItemDetail}>\n        <DialogContent className=\"max-w-md\">\n          {selectedItem && (\n            <div className=\"space-y-4\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  {getItemIcon(selectedItem.itemType)}\n                  {selectedItem.title}\n                </DialogTitle>\n                {selectedItem.featured && (\n                  <Badge className=\"w-fit bg-yellow-100 text-yellow-700\">\n                    <Star className=\"w-3 h-3 mr-1\" />\n                    Featured\n                  </Badge>\n                )}\n              </DialogHeader>\n              \n              <div className=\"space-y-3\">\n                <p className=\"text-gray-700\">{selectedItem.description}</p>\n                \n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Price:</span>\n                    <div className={`font-bold ${\n                      selectedItem.canAfford ? 'text-green-600' : 'text-red-500'\n                    }`}>\n                      {selectedItem.currentPrice} 🪙\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <span className=\"text-gray-600\">Category:</span>\n                    <div className=\"font-medium\">{selectedItem.category}</div>\n                  </div>\n                  \n                  {selectedItem.inventoryType === 'limited' && (\n                    <div>\n                      <span className=\"text-gray-600\">Available:</span>\n                      <div className=\"font-medium\">{selectedItem.availableQuantity}</div>\n                    </div>\n                  )}\n                  \n                  <div>\n                    <span className=\"text-gray-600\">Max per student:</span>\n                    <div className=\"font-medium\">{selectedItem.maxPerStudent}</div>\n                  </div>\n                </div>\n                \n                {selectedItem.isRecurring && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 text-blue-700 mb-1\">\n                      <Clock className=\"w-4 h-4\" />\n                      <span className=\"font-medium text-sm\">Recurring Purchase</span>\n                    </div>\n                    <p className=\"text-xs text-blue-600\">\n                      This item will automatically charge {selectedItem.recurringAmount} 🪙 every {selectedItem.recurringInterval}\n                    </p>\n                  </div>\n                )}\n                \n                {selectedItem.tags.length > 0 && (\n                  <div>\n                    <span className=\"text-sm text-gray-600 mb-2 block\">Tags:</span>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {selectedItem.tags.map((tag, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex gap-2 pt-4\">\n                {!selectedItem.inWishlist && (\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      addToWishlistMutation.mutate(selectedItem.id);\n                      setShowItemDetail(false);\n                    }}\n                    className=\"flex-1\"\n                  >\n                    <Heart className=\"w-4 h-4 mr-2\" />\n                    Add to Wishlist\n                  </Button>\n                )}\n                \n                <Button\n                  onClick={() => {\n                    addToCart(selectedItem);\n                    setShowItemDetail(false);\n                  }}\n                  disabled={!selectedItem.canAfford || (selectedItem.inventoryType === 'limited' && selectedItem.availableQuantity === 0)}\n                  className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add to Cart\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}"